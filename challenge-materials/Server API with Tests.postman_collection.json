{
	"info": {
		"_postman_id": "11e68c58-aca7-4911-9248-fe4c6e83e9af",
		"name": "Server API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "389785"
	},
	"item": [
		{
			"name": "Get Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const Ajv = require('ajv');",
							"const ajv = new Ajv();",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Has a 2x6 products\", function () {",
							"    const value = response.some(item => item.id === '2x6');",
							"    pm.expect(value).to.be.true;",
							"});",
							"",
							"pm.test(\"Has a 6x12 products\", function () {",
							"    const value = response.some(item => item.id === '6x12');",
							"    pm.expect(value).to.be.true;",
							"});",
							"",
							"pm.test(\"Has a 4x6 products\", function () {",
							"    const value = response.some(item => item.id === '4x6');",
							"    pm.expect(value).to.be.true;",
							"});",
							"",
							"pm.test(\"4x6 product has a price of 500\", () => {",
							"    const product = response.find(item => item.id === \"4x6\");",
							"    pm.expect(product.price).to.eq(500);",
							"});",
							"",
							"pm.test(\"6x12 product has a price of 700\", () => {",
							"    const product = response.find(item => item.id === \"6x12\");",
							"    pm.expect(product.price).to.eq(700);",
							"});",
							"",
							"pm.test(\"2x6 product has a price of 500\", () => {",
							"    const product = response.find(item => item.id === \"2x6\");",
							"    pm.expect(product.price).to.eq(500);",
							"});",
							"",
							"",
							"const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": { \"type\": \"string\" },",
							"      \"price\": { \"type\": \"number\" },",
							"      \"width\": { \"type\": \"number\" },",
							"      \"height\": { \"type\": \"number\" },",
							"      \"minAmount\": { \"type\": \"number\" },",
							"      \"photosPerItem\": { \"type\": \"number\" }",
							"    },",
							"    \"required\": [\"id\", \"price\", \"width\", \"height\"]",
							"  }",
							"};",
							"",
							"pm.test(\"Response is valid according to the schema\", function () {",
							"    const validate = ajv.compile(schema);",
							"    const valid = validate(response);",
							"",
							"    pm.expect(valid, `Schema validation errors: ${JSON.stringify(validate.errors, null, 2)}`).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Revenue Report",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/report?month=1&year=2025",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"report"
					],
					"query": [
						{
							"key": "month",
							"value": "1"
						},
						{
							"key": "year",
							"value": "2025"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"6x12\",\r\n        \"price\": 700,\r\n        \"free\": true\r\n    },\r\n    {\r\n        \"id\": \"2x6\",\r\n        \"price\": 500,\r\n        \"free\": true\r\n    },\r\n    {\r\n        \"id\": \"4x6\",\r\n        \"price\": 500\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/order",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"order"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}